import EventEmitter from 'events';
import { inherits } from 'util';
import Tick from 'tick-tock';

import ServerInfoAPI from './';

export default function InfoWatcher( api, watches ) {
	this.running = false;
	this.watches = {};
	this.api = api;
	this.tick = new Tick();

	this.addWatches( watches );
}

inherits( InfoWatcher, EventEmitter );

Object.assign( InfoWatcher.prototype, {
	start() {
		if( ! this.api ) {
			this.stop();
			return false;
		}

		if( this.running ) return true;

		this.running = true;

		for( let apiCall in this.watches ) {
			this.execAPICall( apiCall );
		}

		return true;
	},

	stop() {
		this.tick.clear();
		this.running = false;
	},

	add( apiCall, interval, resHandler ) {
		// this.tick.clear( apiCall );
		this.watches[ apiCall ] = { interval, resHandler };

		if( this.running ) {
			this.immediatelyReExecAPICall( apiCall );
		}
	},

	addWatches( watches ) {
		if( ! watches ) return;

		for( let apiCall in watches ) {
			this.add( apiCall, watches[ apiCall ][ 0 ], watches[ apiCall ][ 1 ] );
		}
	},

	immediatelyReExecAPICall( apiCall ) {
		let watch = this.watches[ apiCall ];

		if( ! watch ) return;

		this.tick.clear( apiCall );
		this.execAPICall( apiCall );
	},

	execAPICall( apiCall ) {
		let { interval, resHandler } = this.watches[ apiCall ];

		if( ! this.api ) return false;

		this.api[ apiCall ]( ( error, res ) => {
			if( error ) {
				this.emit( 'error', error );
				return;
			}
			else if( res ) {
				this.emit( 'data', resHandler( res, apiCall ) );
				return;
			}
			else {
				this.emit( 'error', new Error( `Null response from non-errored call to ${ apiCall }.` ) );
				return;
			}
		});

		this.tick.setTimeout( apiCall, this.execAPICall.bind( this, apiCall ), interval );
	}
});
